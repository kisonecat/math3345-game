{"name": "Math 3345H", "version": "1.0.1", "languages": ["en"], "translated_name": "0", "devmode": false, "library_zip_fn": "Math 3345H-1.0.1-library.zip", "introData": {"name": "", "problemIndex": -1, "objects": [{"type": "text", "content": "1"}]}, "worlds": [{"name": "2", "levels": [{"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "3", "hidden": false}, {"type": "text", "content": "4"}, {"type": "lean", "content": "5", "hidden": true}, {"type": "text", "content": "6"}, {"type": "lean", "content": "7", "hidden": false}, {"type": "lemma", "text": "8", "lean": "lemma use_exact (h : P) (k : Q) : P := \n", "sideBar": false, "firstProofLineNumber": 25, "lastProofLineNumber": 27, "textBefore": "import tactic\n\n/-\n# Level 1 : Using exact \n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\n\n/- Lemma : no-side-bar\n\n`h` is evidence that `P` and `k` is evidence for `Q`.\n\nReplace `sorry` with `exact h` or `exact k` to complete the proof of `P`.\n\n-/\nlemma use_exact (h : P) (k : Q) : P := \nbegin\n", "proof": "\n  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n\n", "height": 3, "editorText": "sorry", "lineOffset": 24, "name": "use_exact", "statement": "(h : P) (k : Q) : P"}, {"type": "lean", "content": "9", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "10", "hidden": false}, {"type": "text", "content": "11"}, {"type": "lean", "content": "12", "hidden": true}, {"type": "text", "content": "13"}, {"type": "lean", "content": "14", "hidden": false}, {"type": "lemma", "text": "15", "lean": "lemma and_elim_1 (h : P \u2227 Q) : Q := \n", "sideBar": false, "firstProofLineNumber": 25, "lastProofLineNumber": 27, "textBefore": "import tactic\n\n/-\n# Level 2 : Using a conjunction \n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\n\n/- Lemma : no-side-bar\n\n`h` is evidence that `P \u2227 Q`, and we can extract evidence for `P` by\nusing `h.left` and extract evidence for `Q` with `h.right`.  Then\nfinish the proof with `exact`.\n\n-/\nlemma and_elim_1 (h : P \u2227 Q) : Q := \nbegin\n", "proof": "\n  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 3, "editorText": "sorry", "lineOffset": 24, "name": "and_elim_1", "statement": "(h : P \u2227 Q) : Q"}, {"type": "lean", "content": "16", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "17", "hidden": false}, {"type": "text", "content": "18"}, {"type": "lean", "content": "19", "hidden": true}, {"type": "text", "content": "20"}, {"type": "lean", "content": "21", "hidden": false}, {"type": "lemma", "text": "22", "lean": "lemma and_more_elim (h : ((P \u2227 Q) \u2227 R)) : Q := \n", "sideBar": false, "firstProofLineNumber": 27, "lastProofLineNumber": 29, "textBefore": "import tactic\n\n/-\n# Level 3 : Deeper conjunctions\n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q and R are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\nvariable R : Prop\n\n/- Lemma : no-side-bar\n\n`h` is evidence that `(P \u2227 Q) \u2227 R`, and we can extract evidence for `P \u2227 Q` by\nusing `h.left` and extract evidence for `R` with `h.right`.  \n\nFinish the proof with `exact` followed by something.\n\n-/\nlemma and_more_elim (h : ((P \u2227 Q) \u2227 R)) : Q := \nbegin\n", "proof": "\n  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 3, "editorText": "sorry", "lineOffset": 26, "name": "and_more_elim", "statement": "(h : ((P \u2227 Q) \u2227 R)) : Q"}, {"type": "lean", "content": "23", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "24", "hidden": false}, {"type": "text", "content": "25"}, {"type": "lean", "content": "26", "hidden": true}, {"type": "text", "content": "27"}, {"type": "lean", "content": "28", "hidden": false}, {"type": "lemma", "text": "29", "lean": "lemma using_and (h : (P \u2227 Q)) : (Q \u2227 P) := \n", "sideBar": false, "firstProofLineNumber": 27, "lastProofLineNumber": 29, "textBefore": "import tactic\n\n/-\n# Level 4 : Proving conjunctions\n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\n\n/- Lemma : no-side-bar\n\n`h` is evidence that `(P \u2227 Q)` so we can extract evidence for `P` by\nusing `h.left` and extract evidence for `Q` with `h.right`.\n\nStart with `split` to separate the thing we're trying to prove into\ntwo goals.  Then finish the proof with `exact` followed by something.\n\n-/\nlemma using_and (h : (P \u2227 Q)) : (Q \u2227 P) := \nbegin\n", "proof": "  split,\n  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 3, "editorText": "sorry", "lineOffset": 26, "name": "using_and", "statement": "(h : (P \u2227 Q)) : (Q \u2227 P)"}, {"type": "lean", "content": "30", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "31", "hidden": false}, {"type": "text", "content": "32"}, {"type": "lean", "content": "33", "hidden": true}, {"type": "text", "content": "34"}, {"type": "lean", "content": "35", "hidden": false}, {"type": "lemma", "text": "36", "lean": "lemma using_disjunction (h : (P \u2227 Q)) : (P \u2228 Q) := \n", "sideBar": false, "firstProofLineNumber": 31, "lastProofLineNumber": 32, "textBefore": "import tactic\n\n/-\n# Level 5 : Proving disjunctions \n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\n\n/- Lemma : no-side-bar\n\n`h` is evidence that `(P \u2227 Q)` so we can again extract evidence for\n`P` by using `h.left` and extract evidence for `Q` with `h.right`.\n\nTo prove a disjunction, we use the tactics `left` or `right` to\nreplace the goal with the left-hand (or right-hand) side of the\ndisjunction.\n\nSo start with `left` or `right` to replace the goal with either `P` or\n`Q`, and then finish the proof with `exact` followed by something.\n\n-/\nlemma using_disjunction (h : (P \u2227 Q)) : (P \u2228 Q) := \nbegin\n", "proof": "  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 2, "editorText": "sorry", "lineOffset": 30, "name": "using_disjunction", "statement": "(h : (P \u2227 Q)) : (P \u2228 Q)"}, {"type": "lean", "content": "37", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "38", "hidden": false}, {"type": "text", "content": "39"}, {"type": "lean", "content": "40", "hidden": true}, {"type": "text", "content": "41"}, {"type": "lean", "content": "42", "hidden": false}, {"type": "lemma", "text": "43", "lean": "lemma using_disjunction (h : (P \u2228 Q)) : (Q \u2228 P) := \n", "sideBar": false, "firstProofLineNumber": 26, "lastProofLineNumber": 33, "textBefore": "import tactic\n\n/-\n# Level 6 : Or commutes\n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\n\n/- Lemma : no-side-bar\n\n`h` is evidence that `P \u2228 Q` but we don't know which one holds.  To\nuse the information provided by `h`, start with `cases h` to consider\nthe two cases (that `P` holds or that `Q` holds) separately.\n\nThen use `left` and `right` and `exact` to finish the proof.\n-/\nlemma using_disjunction (h : (P \u2228 Q)) : (Q \u2228 P) := \nbegin\n", "proof": "  sorry,\n\n\n\n\n\n\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 8, "editorText": "sorry", "lineOffset": 25, "name": "using_disjunction", "statement": "(h : (P \u2228 Q)) : (Q \u2228 P)"}, {"type": "lean", "content": "44", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "45", "hidden": false}, {"type": "text", "content": "46"}, {"type": "lean", "content": "47", "hidden": true}, {"type": "text", "content": "48"}, {"type": "lean", "content": "49", "hidden": false}, {"type": "lemma", "text": "50", "lean": "lemma using_implication (hPQ : P \u2192 Q) (hP : P) : Q := \n", "sideBar": false, "firstProofLineNumber": 29, "lastProofLineNumber": 30, "textBefore": "import tactic\n\n/-\n# Level 7 : Using if-then\n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\n\n/- Lemma : no-side-bar\n\nWe must prove `Q` given the hypothesis `hPQ` which is evidence that\n`P` implies `Q` and using the hypothesis `hP`, which is evidence that\n`P` holds.\n\nWe can achieve this with `exact` with the term `hPQ(hP)`.  You don't\neven need to use the parentheses.\n\nHow is an implication like `hPQ` like a function from `P`s to `Q`s?\n-/\nlemma using_implication (hPQ : P \u2192 Q) (hP : P) : Q := \nbegin\n", "proof": "  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 2, "editorText": "sorry", "lineOffset": 28, "name": "using_implication", "statement": "(hPQ : P \u2192 Q) (hP : P) : Q"}, {"type": "lean", "content": "51", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "52", "hidden": false}, {"type": "text", "content": "53"}, {"type": "lean", "content": "54", "hidden": true}, {"type": "text", "content": "55"}, {"type": "lean", "content": "56", "hidden": false}, {"type": "lemma", "text": "57", "lean": "lemma proving_an_implication (hPQ : P \u2192 Q) (hQR : Q \u2192 R) : P \u2192 R :=\n", "sideBar": false, "firstProofLineNumber": 33, "lastProofLineNumber": 35, "textBefore": "import tactic\n\n/-\n# Level 8 : Proving if-then\n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q and R are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\nvariable R : Prop\n\n/- Lemma : no-side-bar\n\nWe are given hypotheses `hPQ` and `hQR` stating that `P` implies `Q`\nand stating that `Q` implies `R`.  From this, we can deduce that `P`\nimplies `R`, but how do we convince Lean of this?\n\nTo prove `P \u2192 R`, we begin with `intro hP` to introduce a hypothesis\n`hP` asserting that `P` is true.  If we can use this hypothesis to\ndeduce `R`, then we have proved `P \u2192 R`.\n\nWe could use `exact hPQ(hP)` if we were trying to prove `Q`.  How can\nwe also make use of the assumption that `hQR`?\n\n-/\nlemma proving_an_implication (hPQ : P \u2192 Q) (hQR : Q \u2192 R) : P \u2192 R :=\nbegin\n", "proof": "  intro hP,\n  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 3, "editorText": "sorry", "lineOffset": 32, "name": "proving_an_implication", "statement": "(hPQ : P \u2192 Q) (hQR : Q \u2192 R) : P \u2192 R"}, {"type": "lean", "content": "58", "hidden": true}]}, {"name": "", "problemIndex": 5, "objects": [{"type": "lean", "content": "59", "hidden": false}, {"type": "text", "content": "60"}, {"type": "lean", "content": "61", "hidden": true}, {"type": "text", "content": "62"}, {"type": "lean", "content": "63", "hidden": false}, {"type": "lemma", "text": "64", "lean": "lemma proving_an_implication' (hPQ : P \u2192 Q) (hQR : Q \u2192 R) : P \u2192 R :=\n", "sideBar": false, "firstProofLineNumber": 34, "lastProofLineNumber": 37, "textBefore": "import tactic\n\n/-\n# Level 9 : Other tactics\n-/\n\nnamespace math3345 -- hide\n\n/-\nP and Q and R are propositions.\n-/\n\nvariable P : Prop\nvariable Q : Prop\nvariable R : Prop\n\n/- Lemma : no-side-bar\n\nWe are again wanting to prove `P \u2192 R` given that `P \u2192 Q` and `Q \u2192 R`.\nBecause we are trying to prove an implication, we start with `intro\nhP` to introduce the hypothesis `hP` that `P` is true.\n\nThen we `apply hQR` but what does that tactic do?  After `intro hP`,\nour goal is `R`.  But `hQR` would transform a proof of `Q` into our\ngoal, `R`.  So saying `apply hQR` is as if we are saying \"Replace my\ngoal `R` with a new goal `Q` since I can convert `Q`s into `R`s via\n`hQR`.\"\n\nHow could you finish the proof now?\n\n-/\nlemma proving_an_implication' (hPQ : P \u2192 Q) (hQR : Q \u2192 R) : P \u2192 R :=\nbegin\n", "proof": "  intro hP,\n  apply hQR,\n  sorry,\n", "proof_hint": "sorry", "textAfter": "\nend\n\nend math3345 -- hide\n\n", "height": 4, "editorText": "sorry", "lineOffset": 33, "name": "proving_an_implication'", "statement": "(hPQ : P \u2192 Q) (hQR : Q \u2192 R) : P \u2192 R"}, {"type": "lean", "content": "65", "hidden": true}]}]}], "texts": [["Math 3345H", "# Math 3345H, version 1.0.0.\n\n## By Jim Fowler\n\n# What is this game?\n\nMath 3345H at Ohio State is the \"Foundations of Higher Mathematics\"\ncourse, and as such, it serves as an introduction to proof.  The\ncourse is focused on writing, but I suspect formal proofs (like those\nyou can explore via this system) may provide additional insight.\n\n# Credits\n\nThis is clearly based on the <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">Natural Number Game</a> by Kevin Buzzard.  The backend is <a href=\"https://github.com/mpedramfar/Lean-game-maker\">the Lean game maker</a> by \nMohammad Pedramfar.  The game maker itself depends on code from Bryan Gin-ge Chen and Patrick Massot.\n\n", "Propositions", "import tactic\n", "# Level 1 : Using exact \n", "namespace math3345 -- hide\n", "P and Q are propositions.\n", "variable P : Prop\nvariable Q : Prop\n", "`h` is evidence that `P` and `k` is evidence for `Q`.\nReplace `sorry` with `exact h` or `exact k` to complete the proof of `P`.\n", "end math3345 -- hide\n", "import tactic\n", "# Level 2 : Using a conjunction \n", "namespace math3345 -- hide\n", "P and Q are propositions.\n", "variable P : Prop\nvariable Q : Prop\n", "`h` is evidence that `P \u2227 Q`, and we can extract evidence for `P` by\nusing `h.left` and extract evidence for `Q` with `h.right`.  Then\nfinish the proof with `exact`.\n", "end math3345 -- hide\n", "import tactic\n", "# Level 3 : Deeper conjunctions\n", "namespace math3345 -- hide\n", "P and Q and R are propositions.\n", "variable P : Prop\nvariable Q : Prop\nvariable R : Prop\n", "`h` is evidence that `(P \u2227 Q) \u2227 R`, and we can extract evidence for `P \u2227 Q` by\nusing `h.left` and extract evidence for `R` with `h.right`.  \nFinish the proof with `exact` followed by something.\n", "end math3345 -- hide\n", "import tactic\n", "# Level 4 : Proving conjunctions\n", "namespace math3345 -- hide\n", "P and Q are propositions.\n", "variable P : Prop\nvariable Q : Prop\n", "`h` is evidence that `(P \u2227 Q)` so we can extract evidence for `P` by\nusing `h.left` and extract evidence for `Q` with `h.right`.\nStart with `split` to separate the thing we're trying to prove into\ntwo goals.  Then finish the proof with `exact` followed by something.\n", "end math3345 -- hide\n", "import tactic\n", "# Level 5 : Proving disjunctions \n", "namespace math3345 -- hide\n", "P and Q are propositions.\n", "variable P : Prop\nvariable Q : Prop\n", "`h` is evidence that `(P \u2227 Q)` so we can again extract evidence for\n`P` by using `h.left` and extract evidence for `Q` with `h.right`.\nTo prove a disjunction, we use the tactics `left` or `right` to\nreplace the goal with the left-hand (or right-hand) side of the\ndisjunction.\nSo start with `left` or `right` to replace the goal with either `P` or\n`Q`, and then finish the proof with `exact` followed by something.\n", "end math3345 -- hide\n", "import tactic\n", "# Level 6 : Or commutes\n", "namespace math3345 -- hide\n", "P and Q are propositions.\n", "variable P : Prop\nvariable Q : Prop\n", "`h` is evidence that `P \u2228 Q` but we don't know which one holds.  To\nuse the information provided by `h`, start with `cases h` to consider\nthe two cases (that `P` holds or that `Q` holds) separately.\nThen use `left` and `right` and `exact` to finish the proof.\n", "end math3345 -- hide\n", "import tactic\n", "# Level 7 : Using if-then\n", "namespace math3345 -- hide\n", "P and Q are propositions.\n", "variable P : Prop\nvariable Q : Prop\n", "We must prove `Q` given the hypothesis `hPQ` which is evidence that\n`P` implies `Q` and using the hypothesis `hP`, which is evidence that\n`P` holds.\nWe can achieve this with `exact` with the term `hPQ(hP)`.  You don't\neven need to use the parentheses.\nHow is an implication like `hPQ` like a function from `P`s to `Q`s?\n", "end math3345 -- hide\n", "import tactic\n", "# Level 8 : Proving if-then\n", "namespace math3345 -- hide\n", "P and Q and R are propositions.\n", "variable P : Prop\nvariable Q : Prop\nvariable R : Prop\n", "We are given hypotheses `hPQ` and `hQR` stating that `P` implies `Q`\nand stating that `Q` implies `R`.  From this, we can deduce that `P`\nimplies `R`, but how do we convince Lean of this?\nTo prove `P \u2192 R`, we begin with `intro hP` to introduce a hypothesis\n`hP` asserting that `P` is true.  If we can use this hypothesis to\ndeduce `R`, then we have proved `P \u2192 R`.\nWe could use `exact hPQ(hP)` if we were trying to prove `Q`.  How can\nwe also make use of the assumption that `hQR`?\n", "end math3345 -- hide\n", "import tactic\n", "# Level 9 : Other tactics\n", "namespace math3345 -- hide\n", "P and Q and R are propositions.\n", "variable P : Prop\nvariable Q : Prop\nvariable R : Prop\n", "We are again wanting to prove `P \u2192 R` given that `P \u2192 Q` and `Q \u2192 R`.\nBecause we are trying to prove an implication, we start with `intro\nhP` to introduce the hypothesis `hP` that `P` is true.\nThen we `apply hQR` but what does that tactic do?  After `intro hP`,\nour goal is `R`.  But `hQR` would transform a proof of `Q` into our\ngoal, `R`.  So saying `apply hQR` is as if we are saying \"Replace my\ngoal `R` with a new goal `Q` since I can convert `Q`s into `R`s via\n`hQR`.\"\nHow could you finish the proof now?\n", "end math3345 -- hide\n"]]}